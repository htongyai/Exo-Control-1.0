<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox3.Text" xml:space="preserve">
    <value>


#include &lt;Adafruit_NeoPixel.h&gt;
//#ifdef __AVR__
 //#include &lt;avr/power.h&gt; // Required for 16 MHz Adafruit Trinket
//#endif

// Which pin on the Arduino is connected to the NeoPixels?
#define PINl1        D8
#define PINl2        D7
#define PIN        D6 // On Trinket or Gemma, suggest changing this to 1

    

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS 16// Popular NeoPixel ring size

// When setting up the NeoPixel library, we tell it how many pixels,
// and which pin to use to send signals. Note that for older NeoPixel
// strips you might need to change the third parameter -- see the
// strandtest example for more information on possible values.
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel pixelsl1(NUMPIXELS, PINl1, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel pixelsl2(NUMPIXELS, PINl2, NEO_GRB + NEO_KHZ800);



#define DELAYVAL 100 // Time (in milliseconds) to pause between pixels
int incomingByte = 0; // for incoming serial data
int connection_status = 0;

//States
int state = 0;
int react_time;
int round_no = 0;
int total_score;
int red_state = 0;
int hit_once = 0;

void setup() {
  
   //Initialize serial and wait for port to open:
  Serial.begin(9600);
  Serial.write("Start");
  
  // These lines are specifically to support the Adafruit Trinket 5V 16 MHz.
  // Any other board, you can remove this part (but no harm leaving it):
//#if defined(__AVR_ATtiny85__) &amp;&amp; (F_CPU == 16000000)
  //clock_prescale_set(clock_div_1);
//#endif//
  // END of Trinket-specific code.

  pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)
  pixelsl1.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)
  pixelsl2.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)
   
  //bounce_wave();
  //bounce_wave();

  line_n(0,0,55);
  ring_1(0,0,55);
  ring_2(0,0,55);
 
  //line_n(0,0,55);
  //ring_1(0,0,55);
 
  ring_2(0,0,55);
 
  //bleep();

  //attachInterrupt(digitalPinToInterrupt(3),hit, FALLING);
  //pinMode(9,OUTPUT);
  //digitalWrite(9,HIGH);
}

void loop() {
  if (state == 0){
      if (connection_status == 0){
         pending_connection();
      }else{
    
           ring_1(0,0,55);
          ring_2(0,0,55);
           ring_3(0,0,0);
           ring_4(0,0,0);
           ring_5(0,0,0);
           ring_6(0,0,0);
          line_n(0,0,55);
          //delay(100);
      }
       // send data only when you receive data:
      if (Serial.available() &gt; 0) {
        // read the incoming byte:
        incomingByte = Serial.read();
    
        // say what you got:
        Serial.print("I received: ");
        Serial.println(incomingByte);
        Serial.println(incomingByte, DEC);
        if (incomingByte == 49){
        bounce_wave2();
        }else if (incomingByte == 48){
          bounce_wave( );
          connection_status = 1;
          ring_1(0,0,55);
          ring_2(0,0,55);
          line_n(0,0,55);
        }else if (incomingByte == 50){
          connection_status = 0;
          bounce_wave_red( );
           line_n(55,0,0);
          //line_2(55,0,0);
          delay(200);
        }else if (incomingByte == 51){
          connection_status = 0;
          bounce_wave_red( );
           line_n(55,0,0);
          //line_2(55,0,0);
          delay(200);
        }else if(incomingByte == 101){
          state = 2;
        }else if(incomingByte == 58){
         // emoji();
        
        }else if(incomingByte == 98){
          state = 3;
        }else if(incomingByte == 110){
          state = 4;
        }
        }else if(incomingByte == 116){
          state = 5;
        
      }
      //bounce_wave2();
 }else if (state == 2){
  ex_mode_2();
  state = 1;
 }
 else if (state == 4){
  if (Serial.available() &gt; 0) {
        // read the incoming byte:
        incomingByte = Serial.read();
    
        // say what you got:
        Serial.print("I received: ");
        Serial.println(incomingByte);
        Serial.println(incomingByte, DEC);
        if (incomingByte == 110){
        bleep();
        }else if (incomingByte == 98){
        bleep2();
        }
  
  }
 }else if (state == 3){
  if (Serial.available() &gt; 0) {
        // read the incoming byte:
        incomingByte = Serial.read();
    
        // say what you got:
        Serial.print("I received: ");
        Serial.println(incomingByte);
        Serial.println(incomingByte, DEC); 
        if (incomingByte == 110){
        bleep();
        }else if (incomingByte == 98){
        bleep2();
        
  }
 
 } }else if (state == 5){
  tap_mode_();
  state = 1;
 }
 
      
}

void tap_mode_(){
  bleep();
  bleep2();
  delay(1000);
  bleep();
  bleep2();
  delay(1000);
  bleep();
  bleep2();
  delay(1000);
  bleep();
  bleep2();
  delay(1000);
  bleep();
  bleep2();
  delay(1000);
  bleep();
  bleep2();
  delay(1000);
  bleep();
  bleep2();
  delay(1000);
  bleep();
  bleep2();
  delay(1000);
  bleep();
  bleep2();
  delay(1000);
}

void line_n( int r, int g, int b){
  for(int i=0; i&lt;21; i++) { // For each pixel...
    pixelsl1.setPixelColor(i, pixels.Color(r, g, b));
    pixelsl1.show();   // Send the updated pixel colors to the hardware.
    pixelsl2.setPixelColor(i, pixels.Color(r, g, b));
    pixelsl2.show();   // Send the updated pixel colors to the hardware.
    //delay(DELAYVAL); // Pause before next pass through loop
  }
}

void ring_1(int r,int g, int b){
for(int i=0; i&lt;32; i++) { // For each pixel...
    pixels.setPixelColor(i, pixels.Color(r, g, b));
    pixels.show();   // Send the updated pixel colors to the hardware.
    //delay(DELAYVAL); // Pause before next pass through loop
  }
}

void ring_2(int r,int g, int b){
for(int i=32; i&lt;56; i++) { // For each pixel...
    pixels.setPixelColor(i, pixels.Color(r, g, b));
    pixels.show();   // Send the updated pixel colors to the hardware.
    //delay(DELAYVAL); // Pause before next pass through loop
  }
}



void ring_3(int r,int g, int b){
for(int i=56; i&lt;72; i++) { // For each pixel...
    pixels.setPixelColor(i, pixels.Color(r, g, b));
    pixels.show();   // Send the updated pixel colors to the hardware.
    //delay(DELAYVAL); // Pause before next pass through loop
  }
}

void ring_4(int r,int g, int b){
for(int i=72; i&lt;84; i++) { // For each pixel...
    pixels.setPixelColor(i, pixels.Color(r, g, b));
    pixels.show();   // Send the updated pixel colors to the hardware.
    //delay(DELAYVAL); // Pause before next pass through loop
  }
}

void ring_5(int r,int g, int b){
for(int i=84; i&lt;92; i++) { // For each pixel...
    pixels.setPixelColor(i, pixels.Color(r, g, b));
    pixels.show();   // Send the updated pixel colors to the hardware.
    //delay(DELAYVAL); // Pause before next pass through loop
  }
}

void ring_6(int r,int g, int b){
    pixels.setPixelColor(92, pixels.Color(r, g, b));
    pixels.show();   // Send the updated pixel colors to the hardware.
    //delay(DELAYVAL); // Pause before next pass through loop
}

void bounce_gradient(){
  ring_1(0,0,55);
  delay(500);
  ring_1(0,55,155);
  delay(500);
  ring_1(0,0,55);
  delay(500);
}
void bounce_wave(){
  ring_6(0,55,0);
  delay(100);
  ring_6(0,0,0);
  ring_5(0,55,0);
  delay(100);
  ring_5(0,0,0);
  ring_4(0,55,0);
  delay(100);
   ring_4(0,0,0);
  ring_3(0,55,0);
  delay(100);
   ring_3(0,0,0);
  ring_2(0,55,0);
  delay(100);
   ring_2(0,0,0);
  ring_1(0,55,0);
  delay(100);
  ring_1(0,0,0);
}

void bounce_wave_red(){
  ring_6(55,0,0);
  delay(100);
  ring_6(0,0,0);
  ring_5(55,0,0);
  delay(100);
  ring_5(0,0,0);
  ring_4(55,0,0);
  delay(100);
   ring_4(0,0,0);
  ring_3(55,0,0);
  delay(100);
   ring_3(0,0,0);
  ring_2(55,0,0);
  delay(100);
   ring_2(0,0,0);
  ring_1(55,0,0);
  delay(100);
  ring_1(0,0,0);
}

void bounce_wave2(){
  Serial.write("HIT");
  ring_6(55,0,55);
  //delay(100);
  ring_6(55,155,155);
  ring_5(55,0,155);
  //delay(100);
  ring_6(0,0,0);
  ring_5(55,155,155);
  ring_4(55,0,55);
  //delay(100);
  ring_5(0,0,0);
   ring_4(55,155,155);
  ring_3(55,0,55);
  //delay(100);
  ring_4(0,0,0);
   ring_3(55,155,155);
  ring_2(55,0,55);
  //delay(100);
  ring_3(0,0,0);
  ring_2(55,155,155);
  ring_1(55,0,55);
  //delay(100);
  ring_2(0,0,0);
  ring_1(0,0,0);
  //delay(100);
   line_n(55,0,55);
  //line_2(55,0,55);
  delay(100);
   line_n(55,0,0);
  //line_2(55,0,0);
  delay(200);
}

void pending_connection(){
  ring_1(0,0,0);

  ring_2(0,0,0);

  line_n(0,0,0);
  delay(500);
   ring_1(0,55,0);
 
  ring_2(0,55,0);

  line_n(0,55,0);
  delay(500);
}
void bleep(){
  
  ring_2(0,0,0);

  line_n(0,0,0);
  delay(500);
   ring_1(55,0,0);
   

  delay(500);
}

void bleep2(){
  ring_1(0,0,0);
 
  line_n(0,0,0);
  delay(500);
  
  ring_2(55,0,0);
 
  line_n(55,0,0);
  delay(500);
}


void pulsating(){
      for (int i = 25; i &lt; 255;i=i+25){
       ring_1(0,0,i);
      ring_2(0,0,i);
      line_n(0,0,i);
      //delay(100);
    }
    for (int i = 255; i &gt; 1;i=i-25){
       ring_1(0,0,i);
      ring_2(0,0,i);
      line_n(0,0,i);
      //delay(100);
    }
}

void hit(){
  noInterrupts();
  //bounce_wave2();
  if (red_state == 1){
    if (hit_once == 0){
      if (react_time &lt; 500){
        ring_1(255,0,255);
        ring_2(255,0,255);
        Serial.println(react_time);
        Serial.println("Perfect");
        total_score = total_score + 5;
        hit_once = 1;
      }else if (react_time &gt; 500 &amp;&amp; react_time &lt; 1000){
        ring_1(0,0,255);
        ring_2(0,0,255);
        Serial.println(react_time);
        Serial.println("Great");
        total_score = total_score + 4;
        hit_once = 1;
      }else if (react_time &gt; 1000 &amp;&amp; react_time &lt; 1500){
        ring_1(0,255,0);
         ring_2(0,255,0);
        Serial.println(react_time);
        Serial.println("Good");
        total_score = total_score + 3;
        hit_once = 1;
      }else if (react_time &gt; 1500 &amp;&amp; react_time &lt; 20000){
        ring_1(255,100,0);
         ring_2(255,100,0);
        Serial.println(react_time);
        Serial.println("bad");
        total_score = total_score + 1;
        hit_once = 1;
      }else{
        ring_1(255,255,255);
         ring_2(0,255,0);
        Serial.println(react_time);
        Serial.println("Missed");
      }
      } 
      Serial.println("hit_once Enabled");
      Serial.println(hit_once);
    }else{
      Serial.print("Blue Hit - False ");
    }
    
  //red_state = 0;
  interrupts();
  
}

void ex_mode(){
  int waititme = 1000;
  int ran_activation = random(200, 2000);
  line_n(0,0,55);
  ring_1(0,0,55);
  ring_2(0,0,55);
  delay(ran_activation);
  line_n(55,0,0);
  ring_1(55,0,0);
  ring_2(55,0,0);
  delay(ran_activation);
   line_n(0,0,55);
  ring_1(0,0,55);
  ring_2(0,0,55);
  delay(ran_activation);
  line_n(55,0,0);
  ring_1(55,0,0);
  ring_2(55,0,0);
  delay(ran_activation);
   line_n(0,0,55);
  ring_1(0,0,55);
  ring_2(0,0,55);
  delay(ran_activation);
  line_n(55,0,0);
  ring_1(55,0,0);
  ring_2(55,0,0);
  delay(ran_activation);
}

void emoji(){
ring_1(100,100,0);
ring_2(100,100,0);
ring_3(100,100,0);
ring_4(100,100,0);
ring_5(100,100,0);
ring_6(100,100,0);
delay(5000);

  
}

void beep(){
  ring_1(55,0,0);
 
  ring_2(55,0,0);
 
}

void ex_mode_2(){
  int waititme = 2000;
  
  int ran_activation = random(200, 2000);
  for (int i=0;i&lt;10;i++){
    red_state = 0;
    
    
    Serial.print("Round: ");
    Serial.println(i);
    Serial.println("Hit disabled");
     hit_once = 0;
     Serial.println("Hit_once disabled");
    Serial.println(hit_once);
    line_n(0,0,55);
    ring_1(0,0,55);
    ring_2(0,0,55);
    delay(ran_activation);
    Serial.println("Hit Enabled");
    line_n(55,0,0);
    ring_1(55,0,0);
    ring_2(55,0,0);
    react_time = 0;
    red_state = 1;
   
      for (int j =0;j&lt;2000;j++){
      
      delay(1);
      react_time++;
      }
  
  }
  ring_1(0,0,255);
  ring_2(0,0,255);
  ring_3(0,0,255);
  ring_4(0,0,255);
  ring_5(0,0,255);
  ring_6(0,0,255);
  delay(3000);
  Serial.print("total score: ");
  Serial.print(total_score/2);
  Serial.println("/50");
  
}</value>
  </data>
  <data name="textBox2.Text" xml:space="preserve">
    <value>
Wire.beginTransmission(MPU_addr);
 Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
 Wire.endTransmission(false);
 Wire.requestFrom(MPU_addr,14,true);  // request a total of 14 registers
 AcX=Wire.read()&lt;&lt;8|Wire.read();  // 0x3B (ACCEL_XOUT_H) &amp; 0x3C (ACCEL_XOUT_L)
 AcY=Wire.read()&lt;&lt;8|Wire.read();  // 0x3D (ACCEL_YOUT_H) &amp; 0x3E (ACCEL_YOUT_L)
 AcZ=Wire.read()&lt;&lt;8|Wire.read();  // 0x3F (ACCEL_ZOUT_H) &amp; 0x40 (ACCEL_ZOUT_L)
 //Tmp=Wire.read()&lt;&lt;8|Wire.read();  // 0x41 (TEMP_OUT_H) &amp; 0x42 (TEMP_OUT_L)
 GyX=Wire.read()&lt;&lt;8|Wire.read();  // 0x43 (GYRO_XOUT_H) &amp; 0x44 (GYRO_XOUT_L)
 GyY=Wire.read()&lt;&lt;8|Wire.read();  // 0x45 (GYRO_YOUT_H) &amp; 0x46 (GYRO_YOUT_L)
 GyZ=Wire.read()&lt;&lt;8|Wire.read();  // 0x47 (GYRO_ZOUT_H) &amp; 0x48 (GYRO_ZOUT_L)
 Serial.print("Accelerometer Values: \n");
 Serial.print("AcX: "); Serial.print(AcX); Serial.print("\nAcY: "); Serial.print(AcY); Serial.print("\nAcZ: "); Serial.print(AcZ);   
 //Serial.print("\nTemperature: " );  Serial.print(Tmp);
 Serial.print("\nGyroscope Values: \n");
 Serial.print("GyX: "); Serial.print(GyX); Serial.print("\nGyY: "); Serial.print(GyY); Serial.print("\nGyZ: "); Serial.print(GyZ);
 Serial.print("\n");
 delay(3000);</value>
  </data>
  <data name="textBox1.Text" xml:space="preserve">
    <value>
Wire.beginTransmission(MPU_addr);
 Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
 Wire.endTransmission(false);
 Wire.requestFrom(MPU_addr,14,true);  // request a total of 14 registers
 AcX=Wire.read()&lt;&lt;8|Wire.read();  // 0x3B (ACCEL_XOUT_H) &amp; 0x3C (ACCEL_XOUT_L)
 AcY=Wire.read()&lt;&lt;8|Wire.read();  // 0x3D (ACCEL_YOUT_H) &amp; 0x3E (ACCEL_YOUT_L)
 AcZ=Wire.read()&lt;&lt;8|Wire.read();  // 0x3F (ACCEL_ZOUT_H) &amp; 0x40 (ACCEL_ZOUT_L)
 //Tmp=Wire.read()&lt;&lt;8|Wire.read();  // 0x41 (TEMP_OUT_H) &amp; 0x42 (TEMP_OUT_L)
 GyX=Wire.read()&lt;&lt;8|Wire.read();  // 0x43 (GYRO_XOUT_H) &amp; 0x44 (GYRO_XOUT_L)
 GyY=Wire.read()&lt;&lt;8|Wire.read();  // 0x45 (GYRO_YOUT_H) &amp; 0x46 (GYRO_YOUT_L)
 GyZ=Wire.read()&lt;&lt;8|Wire.read();  // 0x47 (GYRO_ZOUT_H) &amp; 0x48 (GYRO_ZOUT_L)
 Serial.print("Accelerometer Values: \n");
 Serial.print("AcX: "); Serial.print(AcX); Serial.print("\nAcY: "); Serial.print(AcY); Serial.print("\nAcZ: "); Serial.print(AcZ);   
 //Serial.print("\nTemperature: " );  Serial.print(Tmp);
 Serial.print("\nGyroscope Values: \n");
 Serial.print("GyX: "); Serial.print(GyX); Serial.print("\nGyY: "); Serial.print(GyY); Serial.print("\nGyZ: "); Serial.print(GyZ);
 Serial.print("\n");
 delay(3000);</value>
  </data>
</root>